System Components Overview

Luci Digitalâ€™s infrastructure relies on three primary virtual machines (VMs) that serve as the backbone for AI workflows, networking, and storage. These VMs are deployed using Proxmox, configured via Vagrant and Terraform, and run various Docker containers to support the platform's needs.

Core VMs:

    Nebula: The host of Lucia AI, responsible for AI workflows and task management.
    Tron: Handles security protocols and network traffic routing, including Traefik for load balancing.
    Data: Manages backup services, data storage, and replication for disaster recovery.

Deployment Process

    Provisioning VMs:

        Using Vagrant and Terraform: Vagrant is used to create the base images for the VMs. Terraform is employed to handle infrastructure provisioning, ensuring each VM is configured consistently. Follow these steps:

            Initialize Vagrant in your Project Directory:

            bash

vagrant init bento/ubuntu-20.04

Configure the VMs in Vagrantfile: In the Vagrantfile, define the VMs like so:

ruby

Vagrant.configure("2") do |config|
  config.vm.define "nebula" do |nebula|
    nebula.vm.box = "bento/ubuntu-20.04"
    nebula.vm.provider "virtualbox" do |vb|
      vb.memory = "4096"
      vb.cpus = 2
    end
  end

  config.vm.define "tron" do |tron|
    tron.vm.box = "bento/ubuntu-20.04"
    tron.vm.provider "virtualbox" do |vb|
      vb.memory = "4096"
      vb.cpus = 2
    end
  end

  config.vm.define "data" do |data|
    data.vm.box = "bento/ubuntu-20.04"
    data.vm.provider "virtualbox" do |vb|
      vb.memory = "4096"
      vb.cpus = 2
    end
  end
end

Run Vagrant: Once the Vagrantfile is configured, use the following command to bring up the VMs:

bash

        vagrant up

        Deploying with Terraform: Terraform handles provisioning beyond the Vagrantfile, automating infrastructure across your environment. Ensure your main.tf file includes the correct providers and configurations for Proxmox and CloudInit.

Setting up Docker:

    Install Docker on each VM once they are up and running:

    bash

sudo apt-get update
sudo apt-get install -y docker.io

Enable Docker to run at startup:

bash

    sudo systemctl enable docker
    sudo systemctl start docker

Running Key Services in Docker:

    Nebula will run Lucia AI services in Docker containers. Lucia will have various containerized microservices (e.g., a model server, task manager, etc.).
    Tron will run Traefik in Docker for network security and traffic routing:

    bash

        sudo docker run -d -p 80:80 -p 443:443 traefik

        Data will run Proxmox Backup and other related data services in Docker containers.

Key Configuration Files

    Vagrantfile: Handles the VM provisioning.
    Terraform Configuration: Ensures consistent infrastructure as code deployment.
    CloudInit Scripts: Automate VM setup during the boot process.
