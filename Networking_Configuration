Networking Configuration Overview

Luci Digital relies on a well-structured network to ensure that all components, VMs, and containers communicate efficiently. The network is designed to be secure, scalable, and resilient. The networking architecture is built around the Nebula, Tron, and Data VMs, utilizing Traefik for routing and CloudInit for network configuration automation.

Core Networking Components:

    Internal Networking: Private network configurations to allow the VMs to communicate with each other securely and efficiently.
    Public Networking: Configured for external access, including APIs, cloud services, and remote management tools.
    Traefik: Used as a reverse proxy and load balancer, managing traffic securely between internal and external networks.

Step 1: Private Network Configuration

Each VM will be connected to a private network to facilitate secure communication.

    Assigning Static IP Addresses: In the Vagrantfile, we will assign static IP addresses to the VMs so they can communicate with each other:

    ruby

Vagrant.configure("2") do |config|
  config.vm.define "nebula" do |nebula|
    nebula.vm.network "private_network", ip: "192.168.33.11"
  end

  config.vm.define "tron" do |tron|
    tron.vm.network "private_network", ip: "192.168.33.12"
  end

  config.vm.define "data" do |data|
    data.vm.network "private_network", ip: "192.168.33.13"
  end
end

Configuring Internal Routing: All VMs communicate over the private network (192.168.33.X). This setup prevents external access to sensitive internal data and isolates traffic between VMs.

Firewall Setup: Each VM should have a firewall enabled to block unwanted traffic. For instance, ufw can be set up on each VM:

bash

    sudo apt-get install ufw
    sudo ufw enable
    sudo ufw allow 22/tcp  # Allow SSH traffic
    sudo ufw allow 80/tcp  # Allow HTTP traffic for Traefik
    sudo ufw allow 443/tcp # Allow HTTPS traffic for Traefik
    sudo ufw allow from 192.168.33.0/24  # Allow internal network traffic

Step 2: Public Network Configuration

Tron acts as the public gateway for external access. It is exposed to the public internet, while Nebula and Data remain on the private network.

    Public IP Address: Tron is configured with a public IP address to allow incoming traffic. Modify the Vagrantfile to set up public networking:

    ruby

config.vm.network "public_network"

Traefik Setup: Tron runs Traefik as a reverse proxy and load balancer, which routes traffic to the appropriate services on Nebula and Data.

    Install Traefik:

    bash

sudo docker run -d -p 80:80 -p 443:443 --name traefik traefik

Traefik Configuration: Create a traefik.toml configuration file to define the routing rules:

toml

[entryPoints]
  [entryPoints.http]
  address = ":80"
  [entryPoints.https]
  address = ":443"

[providers]
  [providers.docker]
  endpoint = "unix:///var/run/docker.sock"
  exposedByDefault = false

Routing Rules: Define which traffic gets routed to which internal services. For example, traffic to /ai might be routed to Nebula:

yaml

        http:
          routers:
            ai:
              rule: "Host(`example.com`) && PathPrefix(`/ai`)"
              service: nebula
          services:
            nebula:
              loadBalancer:
                servers:
                  - url: "http://192.168.33.11"

Step 3: Securing the Network

SSL Certificates:

    Traefik will handle SSL certificates using Let's Encrypt to secure external communications over HTTPS.
        Enable Let's Encrypt in traefik.toml:

        toml

        [certificatesResolvers]
          [certificatesResolvers.le.acme]
            email = "your-email@example.com"
            storage = "acme.json"
            [certificatesResolvers.le.acme.httpChallenge]
              entryPoint = "http"

SSH Keys:

    Secure SSH access to the VMs with SSH key pairs. Disable password-based authentication and allow only key-based logins:

    bash

    sudo nano /etc/ssh/sshd_config
    PasswordAuthentication no

        Add your SSH public key to ~/.ssh/authorized_keys on each VM for secure access.

Step 4: Monitoring and Alerts

    Monitoring Network Traffic: Implement Prometheus or Grafana Loki to monitor network traffic and resource usage on the VMs.

    Alerting: Set up alerting for any suspicious traffic or potential security threats. Traefik can integrate with Prometheus for alerting on traffic spikes or issues.
